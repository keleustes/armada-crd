{
  "additionalProperties": false, 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "livenessProbe": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "labels": {
      "additionalProperties": {
        "additionalProperties": {
          "type": [
            "string", 
            "null"
          ]
        }, 
        "type": "object"
      }, 
      "type": "object", 
      "description": "labels contains tbd"
    }, 
    "ceph_client": {
      "additionalProperties": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": "object", 
      "description": "ceph_client contains tbd"
    }, 
    "manifests": {
      "additionalProperties": {
        "type": "boolean"
      }, 
      "type": "object", 
      "description": "manifests contains tbd"
    }, 
    "global": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "ceph_mgr_modules_config": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "conf": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "fluentd": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "ingress": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "sysctl": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "sysctl contains tbd"
        }, 
        "features": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "encryption_provider": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "eventconfig": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "agent": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "osapi": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "ceph": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "shipyard": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "parsers": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "deckhand": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "novncproxy": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "plugins": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "armada": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "qemu": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "osd": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "httpd": {
          "type": "string", 
          "description": "httpd contains tbd"
        }, 
        "uamlite": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "fluentbit": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "spiceproxy": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "cache": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "storage": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "nova": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "provisioning": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "acconfig": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "keystone": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "ldap": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "test": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "consoleauth": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "config": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "neutron": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "node": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "api_metadata": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "conductor": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "exec": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "rgw_s3": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "maas": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "job": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "ssh": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "scheduler": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "apache": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "openstack_version": {
          "type": "string", 
          "description": "openstack_version contains tbd"
        }, 
        "logging": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "paste": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "drydock": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "pool": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "rgw_ks": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "placement": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "metadata_agent": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "auto_bridge_add": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "overrides": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "curator": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "controllers": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "elasticsearch": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "postgresql": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "defaults": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "coredns": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "security": {
          "type": "string", 
          "description": "security contains tbd"
        }, 
        "prometheus": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "anchor": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "cni_network_config": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "software": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }
      }
    }, 
    "images": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "pull_policy": {
          "type": "string", 
          "description": "pull_policy contains tbd"
        }, 
        "tags": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "tags contains tbd"
        }
      }
    }, 
    "pod": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "security_context": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "mount_path": {
          "type": "string", 
          "description": "mount_path contains tbd"
        }, 
        "replicas": {
          "additionalProperties": {
            "type": "integer", 
            "format": "int32"
          }, 
          "type": "object", 
          "description": "replicas contains tbd"
        }, 
        "affinity": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "env": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "lifecycle": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "resources": {
          "additionalProperties": {
            "additionalProperties": false, 
            "type": "object", 
            "properties": {
              "tests": {
                "type": "object", 
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
              }, 
              "limits": {
                "type": "object", 
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
              }, 
              "fluentbit": {
                "type": "object", 
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
              }, 
              "image_repo_sync": {
                "type": "object", 
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
              }, 
              "snapshot_repository": {
                "type": "object", 
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
              }, 
              "curator": {
                "type": "object", 
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
              }, 
              "requests": {
                "type": "object", 
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
              }
            }
          }, 
          "type": "object", 
          "description": "resources contains tbd"
        }
      }
    }, 
    "monitoring": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "network": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "ingress": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "region_api": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "service_peer": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "maas_ingress": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "kubernetes_netloc": {
          "type": "string", 
          "description": "kubernetes_netloc contains tbd"
        }, 
        "vip": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "drydock": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "host_namespace": {
          "type": "boolean", 
          "description": "host_namespace contains tbd"
        }, 
        "region_proxy": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "pod_cidr": {
          "type": "string", 
          "description": "pod_cidr contains tbd"
        }, 
        "api": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "cluster": {
          "type": "string", 
          "description": "cluster contains tbd"
        }, 
        "kubernetes_service_ip": {
          "type": "string", 
          "description": "kubernetes_service_ip contains tbd"
        }, 
        "backend": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "backend contains tbd"
        }, 
        "interface": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }, 
        "public": {
          "type": "string", 
          "description": "public contains tbd"
        }, 
        "service_cidr": {
          "type": "string", 
          "description": "service_cidr contains tbd"
        }, 
        "service_client": {
          "type": "object", 
          "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
        }
      }
    }, 
    "service": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "ip contains tbd"
        }, 
        "name": {
          "type": "string", 
          "description": "name contains tbd"
        }
      }
    }, 
    "storage": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "prod_environment": {
      "type": "boolean", 
      "description": "prod_environment contains tbd"
    }, 
    "etcd": {
      "additionalProperties": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": "object", 
      "description": "etcd contains tbd"
    }, 
    "nodes": {
      "items": {
        "type": "object", 
        "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "nodes contains tbd"
    }, 
    "development": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "enabled": {
          "type": "boolean", 
          "description": "enabled contains tbd"
        }
      }
    }, 
    "kube_service": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "jobs": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "replicas": {
      "additionalProperties": {
        "type": "integer", 
        "format": "int32"
      }, 
      "type": "object", 
      "description": "replicas contains tbd"
    }, 
    "volume": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "class_name": {
          "type": "string", 
          "description": "class_name contains tbd"
        }, 
        "backup": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "class_name": {
              "type": "string", 
              "description": "class_name contains tbd"
            }, 
            "enabled": {
              "type": "boolean", 
              "description": "enabled contains tbd"
            }, 
            "size": {
              "type": "string", 
              "description": "size contains tbd"
            }
          }
        }, 
        "chown_on_start": {
          "type": "boolean", 
          "description": "chown_on_start contains tbd"
        }, 
        "enabled": {
          "type": "boolean", 
          "description": "enabled contains tbd"
        }, 
        "size": {
          "type": "string", 
          "description": "size contains tbd"
        }
      }
    }, 
    "dependencies": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "deployment": {
      "additionalProperties": {
        "type": "boolean"
      }, 
      "type": "object", 
      "description": "deployment contains tbd"
    }, 
    "networking": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "data": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "bootstrapping": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "enabled": {
          "type": "boolean", 
          "description": "enabled contains tbd"
        }, 
        "host_directory": {
          "type": "string", 
          "description": "host_directory contains tbd"
        }, 
        "filename": {
          "type": "string", 
          "description": "filename contains tbd"
        }
      }
    }, 
    "secrets": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "tls": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "crt": {
              "type": "string", 
              "description": "crt contains tbd"
            }, 
            "ca": {
              "type": "string", 
              "description": "ca contains tbd"
            }, 
            "cert": {
              "type": "string", 
              "description": "cert contains tbd"
            }, 
            "client": {
              "additionalProperties": false, 
              "type": "object", 
              "properties": {
                "ca": {
                  "type": "string", 
                  "description": "ca contains tbd"
                }
              }
            }, 
            "key": {
              "type": "string", 
              "description": "key contains tbd"
            }, 
            "peer": {
              "additionalProperties": false, 
              "type": "object", 
              "properties": {
                "ca": {
                  "type": "string", 
                  "description": "ca contains tbd"
                }
              }
            }
          }
        }, 
        "service_account": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "public_key": {
              "type": "string", 
              "description": "public contains tbd"
            }, 
            "private_key": {
              "type": "string", 
              "description": "private_key contains tbd"
            }
          }
        }, 
        "maas_region": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "value": {
              "type": "string", 
              "description": "value contains tbd"
            }
          }
        }, 
        "etcd": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "tls": {
              "additionalProperties": false, 
              "type": "object", 
              "properties": {
                "crt": {
                  "type": "string", 
                  "description": "crt contains tbd"
                }, 
                "ca": {
                  "type": "string", 
                  "description": "ca contains tbd"
                }, 
                "cert": {
                  "type": "string", 
                  "description": "cert contains tbd"
                }, 
                "client": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "properties": {
                    "ca": {
                      "type": "string", 
                      "description": "ca contains tbd"
                    }
                  }
                }, 
                "key": {
                  "type": "string", 
                  "description": "key contains tbd"
                }, 
                "peer": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "properties": {
                    "ca": {
                      "type": "string", 
                      "description": "ca contains tbd"
                    }
                  }
                }
              }
            }
          }
        }, 
        "keyrings": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "admin": {
              "type": "string", 
              "description": "admin contains tbd"
            }
          }
        }, 
        "anchor": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "tls": {
              "additionalProperties": false, 
              "type": "object", 
              "properties": {
                "crt": {
                  "type": "string", 
                  "description": "crt contains tbd"
                }, 
                "ca": {
                  "type": "string", 
                  "description": "ca contains tbd"
                }, 
                "cert": {
                  "type": "string", 
                  "description": "cert contains tbd"
                }, 
                "client": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "properties": {
                    "ca": {
                      "type": "string", 
                      "description": "ca contains tbd"
                    }
                  }
                }, 
                "key": {
                  "type": "string", 
                  "description": "key contains tbd"
                }, 
                "peer": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "properties": {
                    "ca": {
                      "type": "string", 
                      "description": "ca contains tbd"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, 
    "bootstrap": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "ip contains tbd"
        }, 
        "enabled": {
          "type": "boolean", 
          "description": "enabled contains tbd"
        }, 
        "script": {
          "type": "string", 
          "description": "script contains tbd"
        }
      }
    }, 
    "apiserver": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "endpoints": {
      "additionalProperties": false, 
      "type": "object", 
      "properties": {
        "fluentd": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "ingress": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "process_exporter_metrics": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "prometheus_elasticsearch_exporter": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "fluentbit": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "image": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "ceph_object_store": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "cloudformation": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "ceph_mon": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "compute_novnc_proxy": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "prometheus_fluentd_exporter": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "deckhand": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "kubernetesprovisioner": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "kube_state_metrics": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "armada": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "image_registry": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "maas_region_ui": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "postgresql_airflow_celery_db": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "monitoring": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "oslo_messaging": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "oslo_db_cell0": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "alerts": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "compute_metadata": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "cloudwatch": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "grafana": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "maas_region": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "etcd": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "ldap": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "compute": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "prometheus_openstack_exporter": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "object_store": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "oslo_db": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "oslo_cache": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "maas_db": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "prometheus_rabbitmq_exporter": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "oslo_db_session": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "kibana": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "oslo_db_api": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "nagios": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "physicalprovisioner": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "postgresql_airflow_db": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "identity": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "network": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "volume": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "postgresql_shipyard_db": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "ceph_mgr": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "placement": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "maas_ingress": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "volumev2": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "volumev3": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "shipyard": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "compute_spice_proxy": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "kube_scheduler": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "prometheus_mysql_exporter": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "node_metrics": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "elasticsearch": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "dashboard": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "orchestration": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "kube_controller_manager": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "postgresql": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "statefulset": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "statefulset contains tbd"
            }, 
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "type": "string", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "type": "string", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }, 
        "key_manager": {
          "additionalProperties": false, 
          "type": "object", 
          "properties": {
            "name": {
              "type": "string", 
              "description": "name contains tbd"
            }, 
            "namespace": {
              "type": "string", 
              "description": "namespace contains tbd"
            }, 
            "auth": {
              "additionalProperties": {
                "additionalProperties": false, 
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "description": "username contains tbd"
                  }, 
                  "memcache_secret_key": {
                    "type": "string", 
                    "description": "memcache_secret_key contains tbd"
                  }, 
                  "project_name": {
                    "type": "string", 
                    "description": "project_name contains tbd"
                  }, 
                  "region_name": {
                    "type": "string", 
                    "description": "region_name contains tbd"
                  }, 
                  "database": {
                    "type": "string", 
                    "description": "database contains tbd"
                  }, 
                  "bind": {
                    "type": "string", 
                    "description": "bind contains tbd"
                  }, 
                  "user_domain_name": {
                    "type": "string", 
                    "description": "user_domain_name contains tbd"
                  }, 
                  "tls": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "properties": {
                      "crt": {
                        "type": "string", 
                        "description": "crt contains tbd"
                      }, 
                      "ca": {
                        "type": "string", 
                        "description": "ca contains tbd"
                      }, 
                      "cert": {
                        "type": "string", 
                        "description": "cert contains tbd"
                      }, 
                      "client": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }, 
                      "key": {
                        "type": "string", 
                        "description": "key contains tbd"
                      }, 
                      "peer": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "properties": {
                          "ca": {
                            "type": "string", 
                            "description": "ca contains tbd"
                          }
                        }
                      }
                    }
                  }, 
                  "bind_dn": {
                    "type": "string", 
                    "description": "bind_dn contains tbd"
                  }, 
                  "domain_name": {
                    "type": "string", 
                    "description": "domain_name contains tbd"
                  }, 
                  "tmpurlkey": {
                    "type": "string", 
                    "description": "tmpurlkey contains tbd"
                  }, 
                  "role": {
                    "type": "string", 
                    "description": "role contains tbd"
                  }, 
                  "access_key": {
                    "type": "string", 
                    "description": "access_key contains tbd"
                  }, 
                  "secret_key": {
                    "type": "string", 
                    "description": "secret_key contains tbd"
                  }, 
                  "password": {
                    "type": "string", 
                    "description": "password contains tbd"
                  }, 
                  "email": {
                    "type": "string", 
                    "description": "email contains tbd"
                  }, 
                  "project_domain_name": {
                    "type": "string", 
                    "description": "project_domain_name contains tbd"
                  }
                }
              }, 
              "type": "object", 
              "description": "auth contains tbd"
            }, 
            "host_fqdn_override": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "host_fqdn_override contains tbd"
            }, 
            "hosts": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "hosts contains tbd"
            }, 
            "path": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "path contains tbd"
            }, 
            "scheme": {
              "additionalProperties": {
                "type": "string"
              }, 
              "type": "object", 
              "description": "scheme contains tbd"
            }, 
            "type": {
              "type": "string", 
              "description": "type contains tbd"
            }, 
            "port": {
              "additionalProperties": {
                "additionalProperties": {
                  "type": "integer", 
                  "format": "int32"
                }, 
                "type": "object"
              }, 
              "type": "object", 
              "description": "port contains tbd"
            }
          }
        }
      }
    }, 
    "command_prefix": {
      "items": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "command_prefix contains tbd"
    }, 
    "anchor": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "storageclass": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }
  }
}